version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend_network
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - backend_network
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
     - app-logs:/var/log/app-logs
     - ./promtail-config.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - backend_network
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
     - "3100:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml
    networks:
      - backend_network
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - backend_network
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: rps_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend_network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend_network
  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend_network
  rps-backend:
    image: jacagi/rps_backend
    ports:
      - "8080:8080"
    volumes:
      - app-logs:/var/log/app-logs
    networks:
      - backend_network
    depends_on:
      - postgres
      - kafka
      - loki
  rps-backend-producer:
    image: jacagi/rps_backend_producer
    ports:
      - "8081:8081"
    depends_on:
      - kafka
    networks:
      - backend_network
  rps-frontend:
    image: jacagi/rps_frontend
    ports:
      - "4200:80"
    depends_on:
      - rps-backend
    networks:
      - backend_network
volumes:
  postgres-data:
  app-logs:
  grafana-storage:

networks:
  backend_network:
    driver: bridge